syntax = "proto3";

option csharp_namespace = "Brigine.Communication.Protos";

package brigine.communication;

// 资源服务 - 管理Brigine框架的资源加载和管理
service AssetService {
  // 加载资源
  rpc LoadAsset (LoadAssetRequest) returns (LoadAssetResponse);
  // 卸载资源
  rpc UnloadAsset (UnloadAssetRequest) returns (UnloadAssetResponse);
  // 获取资源信息
  rpc GetAssetInfo (GetAssetInfoRequest) returns (GetAssetInfoResponse);
  // 列出资源
  rpc ListAssets (ListAssetsRequest) returns (ListAssetsResponse);
  // 资源变更事件流
  rpc AssetEvents (AssetEventsRequest) returns (stream AssetEvent);
}

// 加载资源请求
message LoadAssetRequest {
  string framework_id = 1;
  string asset_path = 2;
  bool async = 3;
  map<string, string> load_options = 4;
}

// 加载资源响应
message LoadAssetResponse {
  bool success = 1;
  string error_message = 2;
  string asset_id = 3;
  AssetInfo asset_info = 4;
}

// 卸载资源请求
message UnloadAssetRequest {
  string framework_id = 1;
  string asset_id = 2;
}

// 卸载资源响应
message UnloadAssetResponse {
  bool success = 1;
  string error_message = 2;
}

// 获取资源信息请求
message GetAssetInfoRequest {
  string framework_id = 1;
  string asset_id = 2;
}

// 获取资源信息响应
message GetAssetInfoResponse {
  bool success = 1;
  string error_message = 2;
  AssetInfo asset_info = 3;
}

// 列出资源请求
message ListAssetsRequest {
  string framework_id = 1;
  string path_filter = 2;
  repeated string type_filters = 3;
}

// 列出资源响应
message ListAssetsResponse {
  bool success = 1;
  string error_message = 2;
  repeated AssetInfo assets = 3;
}

// 资源事件请求
message AssetEventsRequest {
  string framework_id = 1;
  repeated AssetEventType event_types = 2;
  string path_filter = 3;
}

// 资源事件
message AssetEvent {
  AssetEventType event_type = 1;
  string framework_id = 2;
  string asset_id = 3;
  string asset_path = 4;
  int64 timestamp = 5;
  map<string, string> event_data = 6;
}

// 资源信息
message AssetInfo {
  string asset_id = 1;
  string path = 2;
  string name = 3;
  AssetType type = 4;
  int64 size = 5;
  int64 last_modified = 6;
  repeated string dependencies = 7;
  map<string, string> metadata = 8;
  bool is_loaded = 9;
}

// 资源类型
enum AssetType {
  UNKNOWN = 0;
  USD_SCENE = 1;
  USD_MESH = 2;
  USD_MATERIAL = 3;
  TEXTURE = 4;
  AUDIO = 5;
  SCRIPT = 6;
  BINARY = 7;
}

// 资源事件类型
enum AssetEventType {
  ASSET_LOADED = 0;
  ASSET_UNLOADED = 1;
  ASSET_MODIFIED = 2;
  ASSET_DEPENDENCY_CHANGED = 3;
  ASSET_ERROR = 4;
} 